plugins {
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.10'
    id 'java'
    id 'org.ajoberstar.grgit' version '1.7.2'
    id 'com.moowork.node' version '1.3.1'
    id 'jacoco'
}

group = 'com.gaejangmo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

jacoco {
    toolVersion = "0.8.5"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/jaypark3749/maven/' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "Greenwich.BUILD-SNAPSHOT")
}

test {
    systemProperty 'spring.profiles.active', 'test'
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws-parameter-store-config:2.1.3.RELEASE'
    implementation 'org.projectlombok:lombok'
    implementation 'com.gaejangmo:gae-jang-mo-utils:0.0.3'
    implementation 'org.ajoberstar:gradle-git:1.7.2'
    implementation 'com.moowork.gradle:gradle-node-plugin:1.3.1'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    implementation 'com.h2database:h2:1.4.199'

    runtimeOnly 'mysql:mysql-connector-java'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'io.findify:s3mock_2.12:0.2.5'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux' // webtestclient 를 위한 추가

    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


import org.ajoberstar.grgit.*

import java.nio.file.Files

def frontDir = "${project.projectDir}/frontend"

task pullFrontEnd {
    if (new File(frontDir).exists()) {
        println 'frontend is already exists'
    } else {
        println 'git clone frontend'
        Grgit.clone(dir: frontDir, uri: 'https://github.com/gae-jang-mo/front-end')
    }
}

node {
    version = '12.6.0'
    download=true
    nodeModulesDir = file("${frontDir}")
    npmWorkDir = file("${frontDir}")
}

task npmBuild(type: NpmTask) {
    args = ["run", "--verbose"]
}

task copyWebApp(type: Copy) {
    from("$frontDir/build")
    into("./build/resources/main/static")
}

npmBuild.dependsOn pullFrontEnd
npmBuild.dependsOn npmInstall
copyWebApp.dependsOn npmBuild
compileJava.dependsOn copyWebApp
